{"meta":{"title":"inerdstack","subtitle":"the stack of it nerds","description":"start from zero","author":"inerdstack","url":"http://songda1005.cn"},"pages":[],"posts":[{"title":"HTML标准模式，和怪异模式","slug":"HTML标准模式，和怪异模式","date":"2018-01-15T12:49:20.000Z","updated":"2018-01-15T13:13:02.731Z","comments":true,"path":"2018/01/15/HTML标准模式，和怪异模式/","link":"","permalink":"http://songda1005.cn/2018/01/15/HTML标准模式，和怪异模式/","excerpt":"","text":"一、什么是标准模式和怪异模式在实现html和css标准化之前，各个浏览器对html和css的解析各有不同，甚至是同一个浏览器的不同版本渲染方式也不同（比如IE6和IE7）。在W3C制定标准之后，浏览器既要按照标准去实现HTML和CSS的支持，又要保证能够兼容以前的非标准的旧网页，于是就有了现在所说的标准模式（严格模式）和兼容模式（怪异模式）。 二、浏览器如何确定渲染模式呢在编写HTML文档时，一般都会在文档的开头，html标签之前声明文档类型：DOCTYPE，当浏览器在解析html文档时，若遇到正确的文档声明，则启用标准模式，按照标准来解析和渲染文档。而对于旧的html文档，或没有DOCTYPE声明的文档，则按照怪异模式来解析文档。html5的文档声明方式：&lt;!DOCTYPE HTML&gt; 。 三、标准模式和怪异模式的区别？1、width不同，在标准模式中：width是内容（content）宽度，元素真正的宽度是外边距、内边距、边框宽度的和，即元素宽度 = margin-left + border-left-width + padding-left + width + padding-right + border-right-width + margin-right，在怪异模式中：width则是元素的实际宽度，width = border-left-width + padding-left+ 内容(content)宽度 + padding-right + border-right-width。 2、内联元素的尺寸标准模式中，给span等行内元素设置width和height都不会生效，而在怪异模式下，却会生效。 3、可设置百分比的高度在标准模式下，一个元素的高度由其包含的内容content决定，如果父元素没有设置高度，子元素设置一个百分比高度是无效的。 4、用margin : 0 auto设置水平居中在标准模式下可以使元素水平居中，但是在怪异模式下，无效，可以用text-align : center;来实现居中。 5、怪异模式下设置图片的padding会失效 6、怪异模式下table中的字体属性不能继承上层的设置 7、元素溢出的处理，标准模式下，overflow默认去visible，在怪异模式下，溢出会被当做扩展box来对待，溢出不会裁减，元素框自动调整大小，能够包含溢出内容。","categories":[],"tags":[]},{"title":"HTML5新特性，语义化","slug":"HTML5新特性，语义化","date":"2018-01-13T07:49:00.000Z","updated":"2018-01-14T13:51:50.137Z","comments":true,"path":"2018/01/13/HTML5新特性，语义化/","link":"","permalink":"http://songda1005.cn/2018/01/13/HTML5新特性，语义化/","excerpt":"","text":"一、为什么HTML5要引入新语义标签在HTML5之前采用HTML+CSS文档结构写法，但是这样的布局方式不仅使我们的文档结构不够清晰，而且不利于搜索引擎爬虫对我们页面的爬取。为了解决上述缺点，HTML5新增了很多新的语义化标签。 二、引入语义化标签的优点引入语义化标签的好处主要有下列三点： 比&lt;div&gt;标签有更加丰富的含义，方便开发与维护 搜索引擎能更方便的识别页面的每个部分 方便其他设备解析（如移动设备、盲人阅读器等） 三、标签详解所谓语义化标签就是一种我们仅通过标签名就能判断出该标签内容的语义的标签。下面将介绍&lt;article&gt; &lt;section&gt; &lt;nav&gt; &lt;aside&gt;、&lt;header&gt; &lt;footer&gt;等HTML5新增的语义化区块标签。 （一） header 通常被放置在页面或者页面中某个区块元素的顶部，包含整个页面或者区块的标题、简介等信息，起到引导与导航的作用。 我们不但可以放置页面或者页面中某个区块的标题，还可以放置搜索表单、logo图片等元素，按照最新的W3C标准，我们还可以放置&lt;nav&gt;导航栏。 下面是一个使用该标签的网站头部实例： 1234&lt;header&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;**科技&quot; /&gt; &lt;h1&gt;**信息科技有限公司&lt;/h1&gt;&lt;/header&gt; 需要注意的是，一个文档中可以包含一对或者一对以上的&lt;header&gt;标签。标签的位置是次要的，不一定非要显示在页面的上方，我们可以为任何需要的区块标签添加&lt;header&gt;元素，例如下面将要讲解的&lt;article&gt; &lt;section&gt;等标签。 （二）nav 表示页面的导航，可以通过导航连接到网站的其他页面，或者当前页面的其它部分。 &lt;nav&gt;不但可以作为页面独立的导航区域存在，我们还可以在&lt;header&gt;标签中使用。此外，&lt;nav&gt;标签还可以显示在侧边栏中。由此可见，一个页面之中可以有多个&lt;nav&gt;标签。 根据HTML5标准，&lt;nav&gt;标签只用于页面的主要导航部分。因为搜索引擎或者屏幕阅读器会根据&lt;nav&gt;标签来确定网站的主体内容，所以并不是任意一组超链接都适合放置在&lt;nav&gt;标签中,我们只要将主要的，基本的链接组放进&lt;nav&gt;即可,对于有辅助性的页脚链接则不推荐使用&lt;nav&gt;标签。 示例如下： 1234567891011&lt;header&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;**科技&quot; /&gt; &lt;h1&gt;**信息科技有限公司&lt;/h1&gt; &lt;nav&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;example.html&quot;&gt;客户案例&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;service_one.html&quot;&gt;技术服务&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;aboutus_one.html&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;connection.html&quot;&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;/nav&gt;&lt;/header&gt; 值得我们注意的是,HTML5规范不允许将&lt;nav&gt;标签嵌套在&lt;address&gt;标签中使用。 （三）aside 所包含的内容不是页面的主要内容、具有独立性，是对页面的补充。 &lt;aside&gt;标签一般使用在页面、文章的侧边栏、广告、友情链接等区域 示例如下： 12345678 &lt;article&gt; &lt;h1&gt;HTML5学习之语义化标签&lt;/h1&gt; &lt;p&gt;....正文.....&lt;/p&gt; &lt;aside&gt; &lt;h2&gt;什么是语义化标签&lt;/h2&gt; &lt;p&gt;语义化标签就是......&lt;/p&gt; &lt;/aside&gt;&lt;/article&gt; (四）footer 一般被放置在页面或者页面中某个区块的底部，包含版权信息、联系方式等信息。 跟&lt;header&gt;标签一样，&lt;footer&gt;标签的使用个数没有限制，可以在任意需要的区块底部使用。 示例如下： 12345&lt;footer&gt; &lt;small&gt; 版权所有 © 2016-2017 **信息科技有限公司 &lt;/small&gt;&lt;/footer&gt; （五）article 表示包含于一个文档、页面、应用程序或网站中的一段独立的内容，可以被独立的发布或者重新使用文章标记标签。 &lt;article&gt;标签应该使用在相对比较独立、完整的的内容区块，所以我们可以在一篇博客、一个论坛帖子、一篇新闻报道或者一个用户评论中使用它。通常情况下，一个&lt;article&gt;元素包括标题、正文和脚注。和&lt;nav&gt;标签一样，该标签同样不能用在&lt;address&gt;标签中； 示例如下： 12345&lt;article&gt; &lt;h1&gt;HTML5学习之语义化标签&lt;/h1&gt; &lt;p&gt;....正文.....&lt;/p&gt; &lt;footer&gt;版权所有*伪版必究&lt;/footer&gt;&lt;/article&gt; &lt;article&gt;标签还可以嵌套使用，但是它们必须是部分与整体的关系。例如在一篇发表的博客中，我们可以对读者评论使用该标签。 示例如下： 1234567891011121314151617181920212223&lt;article&gt; &lt;h1&gt;HTML5学习之语义化标签&lt;/h1&gt; &lt;p&gt;....正文.....&lt;/p&gt; &lt;article&gt; &lt;header&gt; &lt;h2&gt;读者评论&lt;/h2&gt; &lt;/header&gt; &lt;article&gt; &lt;header&gt; &lt;h3&gt;评论人：张三&lt;/h3&gt; &lt;p&gt;评论时间：&lt;time datetime=&quot;2017-02-15&quot;&gt;2017-02-15 11:45:23&lt;/time&gt;&lt;/p&gt; &lt;/header&gt; &lt;p&gt;张三到此一游&lt;/p&gt; &lt;/article&gt; &lt;article&gt; &lt;header&gt; &lt;h3&gt;评论人：李四&lt;/h3&gt; &lt;p&gt;评论时间：&lt;time datetime=&quot;2017-02-09&quot;&gt;2017-02-09 14:20:15&lt;/time&gt;&lt;/p&gt; &lt;/header&gt; &lt;p&gt;李四到此一游&lt;/p&gt; &lt;/article&gt; &lt;/article&gt; &lt;/article&gt; (六）section 是一个主题性的内容分组，通常用于对页面进行分块或者对文章等进行分段 &lt;section&gt;标签所包裹的是有一组相似的主题的内容，可以用这个标签来实现文章的章节、标签式对话框中的各种标签页等类似的功能。 &lt;section&gt;通常包含一个头部&lt;header&gt;、可能还会包含一个尾部&lt;footer&gt;。 示例如下： 12345678910111213141516&lt;article&gt; &lt;h1&gt;JavaScript框架&lt;/h1&gt; &lt;p&gt;Javascript框架是指以Javascript语言为基础搭建的编程框架。&lt;/p&gt; &lt;section&gt; &lt;h2&gt;angular.Js&lt;h2&gt; &lt;p&gt;angular.Js是一款优秀的前端JS框架&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;Vue.js&lt;h2&gt; &lt;p&gt;Vue.js是用于构建交互式的Web界面的库&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;jQuery&lt;h2&gt; &lt;p&gt;jQuery是一个快速、简洁的JavaScript框架。&lt;/p&gt; &lt;/section&gt;&lt;/article&gt; 在这篇关于JS框架的文章中,所列举的三个框架都是文章主题构成的一部分，所以我们使用&lt;section&gt;标签对其进行分段。 我们不但可以在&lt;article&gt;标签中使用&lt;section&gt;标签，还可以在&lt;section&gt;标签中使用&lt;article&gt;标签。 示例如下： 12345678910111213141516&lt;section&gt; &lt;h1&gt;HTML5技术栈&lt;/h1&gt; &lt;p&gt;广义而言的HTML5包含HTML、CSS和JavaScript三个部分&lt;/p&gt; &lt;article&gt; &lt;h2&gt;HTML&lt;h2&gt; &lt;p&gt;内容&lt;/p&gt; &lt;/article&gt; &lt;article&gt; &lt;h2&gt;CSS&lt;h2&gt; &lt;p&gt;样式&lt;/p&gt; &lt;/article&gt; &lt;article&gt; &lt;h2&gt;JavaScript&lt;h2&gt; &lt;p&gt;行为&lt;/p&gt; &lt;/article&gt;&lt;/section&gt; 在这个例子中，&lt;section&gt;标签代表一段内容，在这段内容中，HTML、CSS、Javascript是三个完全独立的部分，因而我们为这三个不同的部分分别使用&lt;article&gt;标签。 &lt;div&gt; &lt;section&gt; &lt;article&gt;三者的比较： &lt;div&gt;：应用广泛，只要我们想为一个区域定义一个样式或者为其添加JS行为，就可以使用div标签 &lt;section&gt;：包含的内容是一个明确的主题，通常有标题区域 &lt;article&gt;:如果我们的页面中需要一个单独的模块来实现一个单独的功能，就用&lt;article&gt;，其他的时候都用&lt;section&gt;。 四、文档级别语义HTML5试图为每个元素加入一个特定的文档级别语义。 （一）ruby、rt、rpruby是一种排版注释系统，是位于横排基础文本上方的简短文字，主要针对东亚语言作出简单的读音注释。例如可以为中文或日文显示读音。ruby涉及的元素包括ruby、rt以及rp。首先使用ruby指定一个具体的表达式，然后使用rt提供说明。rt部分将显示在表达式上方。下面这个例子中，拼音将显示在文字的上方。 1234&lt;ruby&gt; 北&lt;rt&gt;bei&lt;/rt&gt; 京&lt;rt&gt;jing&lt;/rt&gt;&lt;/ruby&gt; 但是在不支持ruby的浏览器中需要使用rp对这两个区块进行视觉上的隔离。 12345678910&lt;ruby&gt; 北 &lt;rp&gt; &lt;rt&gt;bei&lt;/rt&gt; &lt;/rp&gt; 京 &lt;rp&gt; &lt;rt&gt;jing&lt;/rt&gt; &lt;/rp&gt;&lt;/ruby&gt; ####（二）time 为了将现在的常用的日期和时间语句用规范的、利于机器识别的格式进行表述，time元素提供了一个可选的时间和时区组件。 为了确保机器能够正确识别，我们可以使用datetime属性，其属性值可以被定义为时间、日期或者这两者的复合体。 1&lt;time datetime=&quot;2017-07-03&quot;&gt; 还可以使用pubdate为一个网页指定发布时间。 注意：在 HTML5中，true或false并非有效的属性值，当解释器发现存在布尔属性时，它将直接解释为true。如果需要将属性设为false，将这个属性去掉即可。 （三）markmark元素用于高亮标记一段文字。可以使用mark元素来标记出网页里被搜索的关键词或是用于高亮显示一段解释性的代码。（四）wbrwbr元素用于让浏览器为长单词增加可选择的破折号，以便自动拆行。在相当长的单词中插入一对wbr元素，可以让浏览器根据排版的需要决定是否将单词换行。破折号是否出现，以及出现的位置完全由排版决定。wbr只是允许自动拆行，但非强制拆行。（五）略微改变的元素在HTML4版本中的标签元素在HTML5中有了新的定义。使用b表示文档渲染为粗体，而i表示文档渲染为斜体。使用strong和em来强调一段重要的文本。cite用来为对参考文献的引用进行定义，比如书籍或杂志的标题。small不仅仅指的是小字体，它还同样为法律声明增添不具有重要性的旁注或小字。hr现在表达的是主体性的间断，不再仅仅是分割版面的一条水平线。 今天就到这吧朋友们，拜拜","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-01-12T10:59:59.836Z","updated":"2018-01-12T10:59:59.837Z","comments":true,"path":"2018/01/12/hello-world/","link":"","permalink":"http://songda1005.cn/2018/01/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}